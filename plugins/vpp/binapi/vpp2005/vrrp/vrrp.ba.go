// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/plugins/vrrp.api.json

/*
Package vrrp is a generated VPP binary API for 'vrrp' module.

It consists of:
	 12 enums
	  7 aliases
	 11 types
	  1 union
	 14 messages
	  7 services
*/
package vrrp

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"

	ethernet_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2005/ethernet_types"
	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2005/interface_types"
	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2005/ip_types"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "vrrp"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.1"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x1903f1f1
)

type AddressFamily = ip_types.AddressFamily

type IfStatusFlags = interface_types.IfStatusFlags

type IfType = interface_types.IfType

type IPDscp = ip_types.IPDscp

type IPEcn = ip_types.IPEcn

type IPProto = ip_types.IPProto

type LinkDuplex = interface_types.LinkDuplex

type MtuProto = interface_types.MtuProto

type RxMode = interface_types.RxMode

type SubIfFlags = interface_types.SubIfFlags

// VrrpVrFlags represents VPP binary API enum 'vrrp_vr_flags'.
type VrrpVrFlags uint32

const (
	VRRP_API_VR_PREEMPT VrrpVrFlags = 1
	VRRP_API_VR_ACCEPT  VrrpVrFlags = 2
	VRRP_API_VR_UNICAST VrrpVrFlags = 4
	VRRP_API_VR_IPV6    VrrpVrFlags = 8
)

var VrrpVrFlags_name = map[uint32]string{
	1: "VRRP_API_VR_PREEMPT",
	2: "VRRP_API_VR_ACCEPT",
	4: "VRRP_API_VR_UNICAST",
	8: "VRRP_API_VR_IPV6",
}

var VrrpVrFlags_value = map[string]uint32{
	"VRRP_API_VR_PREEMPT": 1,
	"VRRP_API_VR_ACCEPT":  2,
	"VRRP_API_VR_UNICAST": 4,
	"VRRP_API_VR_IPV6":    8,
}

func (x VrrpVrFlags) String() string {
	s, ok := VrrpVrFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// VrrpVrState represents VPP binary API enum 'vrrp_vr_state'.
type VrrpVrState uint32

const (
	VRRP_API_VR_STATE_INIT      VrrpVrState = 0
	VRRP_API_VR_STATE_BACKUP    VrrpVrState = 1
	VRRP_API_VR_STATE_MASTER    VrrpVrState = 2
	VRRP_API_VR_STATE_INTF_DOWN VrrpVrState = 3
)

var VrrpVrState_name = map[uint32]string{
	0: "VRRP_API_VR_STATE_INIT",
	1: "VRRP_API_VR_STATE_BACKUP",
	2: "VRRP_API_VR_STATE_MASTER",
	3: "VRRP_API_VR_STATE_INTF_DOWN",
}

var VrrpVrState_value = map[string]uint32{
	"VRRP_API_VR_STATE_INIT":      0,
	"VRRP_API_VR_STATE_BACKUP":    1,
	"VRRP_API_VR_STATE_MASTER":    2,
	"VRRP_API_VR_STATE_INTF_DOWN": 3,
}

func (x VrrpVrState) String() string {
	s, ok := VrrpVrState_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type AddressWithPrefix = ip_types.AddressWithPrefix

type InterfaceIndex = interface_types.InterfaceIndex

type IP4Address = ip_types.IP4Address

type IP4AddressWithPrefix = ip_types.IP4AddressWithPrefix

type IP6Address = ip_types.IP6Address

type IP6AddressWithPrefix = ip_types.IP6AddressWithPrefix

type MacAddress = ethernet_types.MacAddress

type Address = ip_types.Address

type IP4Prefix = ip_types.IP4Prefix

type IP6Prefix = ip_types.IP6Prefix

type Mprefix = ip_types.Mprefix

type Prefix = ip_types.Prefix

type PrefixMatcher = ip_types.PrefixMatcher

// VrrpVrConf represents VPP binary API type 'vrrp_vr_conf'.
type VrrpVrConf struct {
	SwIfIndex InterfaceIndex
	VrID      uint8
	Priority  uint8
	Interval  uint16
	Flags     VrrpVrFlags
}

func (*VrrpVrConf) GetTypeName() string { return "vrrp_vr_conf" }

// VrrpVrKey represents VPP binary API type 'vrrp_vr_key'.
type VrrpVrKey struct {
	SwIfIndex InterfaceIndex
	VrID      uint8
	IsIPv6    uint8
}

func (*VrrpVrKey) GetTypeName() string { return "vrrp_vr_key" }

// VrrpVrRuntime represents VPP binary API type 'vrrp_vr_runtime'.
type VrrpVrRuntime struct {
	State         VrrpVrState
	MasterAdvInt  uint16
	Skew          uint16
	MasterDownInt uint16
	Mac           MacAddress
	Tracking      VrrpVrTracking
}

func (*VrrpVrRuntime) GetTypeName() string { return "vrrp_vr_runtime" }

// VrrpVrTrackIf represents VPP binary API type 'vrrp_vr_track_if'.
type VrrpVrTrackIf struct {
	SwIfIndex InterfaceIndex
	Priority  uint8
}

func (*VrrpVrTrackIf) GetTypeName() string { return "vrrp_vr_track_if" }

// VrrpVrTracking represents VPP binary API type 'vrrp_vr_tracking'.
type VrrpVrTracking struct {
	InterfacesDec uint32
	Priority      uint8
}

func (*VrrpVrTracking) GetTypeName() string { return "vrrp_vr_tracking" }

type AddressUnion = ip_types.AddressUnion

// VrrpVrAddDel represents VPP binary API message 'vrrp_vr_add_del'.
type VrrpVrAddDel struct {
	IsAdd     uint8
	SwIfIndex InterfaceIndex
	VrID      uint8
	Priority  uint8
	Interval  uint16
	Flags     VrrpVrFlags
	NAddrs    uint8 `struc:"sizeof=Addrs"`
	Addrs     []Address
}

func (m *VrrpVrAddDel) Reset()                        { *m = VrrpVrAddDel{} }
func (*VrrpVrAddDel) GetMessageName() string          { return "vrrp_vr_add_del" }
func (*VrrpVrAddDel) GetCrcString() string            { return "6dc4b881" }
func (*VrrpVrAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// VrrpVrAddDelReply represents VPP binary API message 'vrrp_vr_add_del_reply'.
type VrrpVrAddDelReply struct {
	Retval int32
}

func (m *VrrpVrAddDelReply) Reset()                        { *m = VrrpVrAddDelReply{} }
func (*VrrpVrAddDelReply) GetMessageName() string          { return "vrrp_vr_add_del_reply" }
func (*VrrpVrAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*VrrpVrAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// VrrpVrDetails represents VPP binary API message 'vrrp_vr_details'.
type VrrpVrDetails struct {
	Config  VrrpVrConf
	Runtime VrrpVrRuntime
	NAddrs  uint8 `struc:"sizeof=Addrs"`
	Addrs   []Address
}

func (m *VrrpVrDetails) Reset()                        { *m = VrrpVrDetails{} }
func (*VrrpVrDetails) GetMessageName() string          { return "vrrp_vr_details" }
func (*VrrpVrDetails) GetCrcString() string            { return "0412fa71" }
func (*VrrpVrDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// VrrpVrDump represents VPP binary API message 'vrrp_vr_dump'.
type VrrpVrDump struct {
	SwIfIndex InterfaceIndex
}

func (m *VrrpVrDump) Reset()                        { *m = VrrpVrDump{} }
func (*VrrpVrDump) GetMessageName() string          { return "vrrp_vr_dump" }
func (*VrrpVrDump) GetCrcString() string            { return "f9e6675e" }
func (*VrrpVrDump) GetMessageType() api.MessageType { return api.RequestMessage }

// VrrpVrPeerDetails represents VPP binary API message 'vrrp_vr_peer_details'.
type VrrpVrPeerDetails struct {
	SwIfIndex  InterfaceIndex
	VrID       uint8
	IsIPv6     uint8
	NPeerAddrs uint8 `struc:"sizeof=PeerAddrs"`
	PeerAddrs  []Address
}

func (m *VrrpVrPeerDetails) Reset()                        { *m = VrrpVrPeerDetails{} }
func (*VrrpVrPeerDetails) GetMessageName() string          { return "vrrp_vr_peer_details" }
func (*VrrpVrPeerDetails) GetCrcString() string            { return "abd9145e" }
func (*VrrpVrPeerDetails) GetMessageType() api.MessageType { return api.RequestMessage }

// VrrpVrPeerDump represents VPP binary API message 'vrrp_vr_peer_dump'.
type VrrpVrPeerDump struct {
	SwIfIndex InterfaceIndex
	IsIPv6    uint8
	VrID      uint8
}

func (m *VrrpVrPeerDump) Reset()                        { *m = VrrpVrPeerDump{} }
func (*VrrpVrPeerDump) GetMessageName() string          { return "vrrp_vr_peer_dump" }
func (*VrrpVrPeerDump) GetCrcString() string            { return "6fa3f7c4" }
func (*VrrpVrPeerDump) GetMessageType() api.MessageType { return api.RequestMessage }

// VrrpVrSetPeers represents VPP binary API message 'vrrp_vr_set_peers'.
type VrrpVrSetPeers struct {
	SwIfIndex InterfaceIndex
	VrID      uint8
	IsIPv6    uint8
	NAddrs    uint8 `struc:"sizeof=Addrs"`
	Addrs     []Address
}

func (m *VrrpVrSetPeers) Reset()                        { *m = VrrpVrSetPeers{} }
func (*VrrpVrSetPeers) GetMessageName() string          { return "vrrp_vr_set_peers" }
func (*VrrpVrSetPeers) GetCrcString() string            { return "baa2e52b" }
func (*VrrpVrSetPeers) GetMessageType() api.MessageType { return api.RequestMessage }

// VrrpVrSetPeersReply represents VPP binary API message 'vrrp_vr_set_peers_reply'.
type VrrpVrSetPeersReply struct {
	Retval int32
}

func (m *VrrpVrSetPeersReply) Reset()                        { *m = VrrpVrSetPeersReply{} }
func (*VrrpVrSetPeersReply) GetMessageName() string          { return "vrrp_vr_set_peers_reply" }
func (*VrrpVrSetPeersReply) GetCrcString() string            { return "e8d4e804" }
func (*VrrpVrSetPeersReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// VrrpVrStartStop represents VPP binary API message 'vrrp_vr_start_stop'.
type VrrpVrStartStop struct {
	SwIfIndex InterfaceIndex
	VrID      uint8
	IsIPv6    uint8
	IsStart   uint8
}

func (m *VrrpVrStartStop) Reset()                        { *m = VrrpVrStartStop{} }
func (*VrrpVrStartStop) GetMessageName() string          { return "vrrp_vr_start_stop" }
func (*VrrpVrStartStop) GetCrcString() string            { return "0662a3b7" }
func (*VrrpVrStartStop) GetMessageType() api.MessageType { return api.RequestMessage }

// VrrpVrStartStopReply represents VPP binary API message 'vrrp_vr_start_stop_reply'.
type VrrpVrStartStopReply struct {
	Retval int32
}

func (m *VrrpVrStartStopReply) Reset()                        { *m = VrrpVrStartStopReply{} }
func (*VrrpVrStartStopReply) GetMessageName() string          { return "vrrp_vr_start_stop_reply" }
func (*VrrpVrStartStopReply) GetCrcString() string            { return "e8d4e804" }
func (*VrrpVrStartStopReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// VrrpVrTrackIfAddDel represents VPP binary API message 'vrrp_vr_track_if_add_del'.
type VrrpVrTrackIfAddDel struct {
	SwIfIndex InterfaceIndex
	IsIPv6    uint8
	VrID      uint8
	IsAdd     uint8
	NIfs      uint8 `struc:"sizeof=Ifs"`
	Ifs       []VrrpVrTrackIf
}

func (m *VrrpVrTrackIfAddDel) Reset()                        { *m = VrrpVrTrackIfAddDel{} }
func (*VrrpVrTrackIfAddDel) GetMessageName() string          { return "vrrp_vr_track_if_add_del" }
func (*VrrpVrTrackIfAddDel) GetCrcString() string            { return "337f4ba4" }
func (*VrrpVrTrackIfAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// VrrpVrTrackIfAddDelReply represents VPP binary API message 'vrrp_vr_track_if_add_del_reply'.
type VrrpVrTrackIfAddDelReply struct {
	Retval int32
}

func (m *VrrpVrTrackIfAddDelReply) Reset()                        { *m = VrrpVrTrackIfAddDelReply{} }
func (*VrrpVrTrackIfAddDelReply) GetMessageName() string          { return "vrrp_vr_track_if_add_del_reply" }
func (*VrrpVrTrackIfAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*VrrpVrTrackIfAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// VrrpVrTrackIfDetails represents VPP binary API message 'vrrp_vr_track_if_details'.
type VrrpVrTrackIfDetails struct {
	SwIfIndex InterfaceIndex
	VrID      uint8
	IsIPv6    uint8
	NIfs      uint8 `struc:"sizeof=Ifs"`
	Ifs       []VrrpVrTrackIf
}

func (m *VrrpVrTrackIfDetails) Reset()                        { *m = VrrpVrTrackIfDetails{} }
func (*VrrpVrTrackIfDetails) GetMessageName() string          { return "vrrp_vr_track_if_details" }
func (*VrrpVrTrackIfDetails) GetCrcString() string            { return "99bcca9c" }
func (*VrrpVrTrackIfDetails) GetMessageType() api.MessageType { return api.RequestMessage }

// VrrpVrTrackIfDump represents VPP binary API message 'vrrp_vr_track_if_dump'.
type VrrpVrTrackIfDump struct {
	SwIfIndex InterfaceIndex
	IsIPv6    uint8
	VrID      uint8
	DumpAll   uint8
}

func (m *VrrpVrTrackIfDump) Reset()                        { *m = VrrpVrTrackIfDump{} }
func (*VrrpVrTrackIfDump) GetMessageName() string          { return "vrrp_vr_track_if_dump" }
func (*VrrpVrTrackIfDump) GetCrcString() string            { return "a34dfc6d" }
func (*VrrpVrTrackIfDump) GetMessageType() api.MessageType { return api.RequestMessage }

func init() {
	api.RegisterMessage((*VrrpVrAddDel)(nil), "vrrp.VrrpVrAddDel")
	api.RegisterMessage((*VrrpVrAddDelReply)(nil), "vrrp.VrrpVrAddDelReply")
	api.RegisterMessage((*VrrpVrDetails)(nil), "vrrp.VrrpVrDetails")
	api.RegisterMessage((*VrrpVrDump)(nil), "vrrp.VrrpVrDump")
	api.RegisterMessage((*VrrpVrPeerDetails)(nil), "vrrp.VrrpVrPeerDetails")
	api.RegisterMessage((*VrrpVrPeerDump)(nil), "vrrp.VrrpVrPeerDump")
	api.RegisterMessage((*VrrpVrSetPeers)(nil), "vrrp.VrrpVrSetPeers")
	api.RegisterMessage((*VrrpVrSetPeersReply)(nil), "vrrp.VrrpVrSetPeersReply")
	api.RegisterMessage((*VrrpVrStartStop)(nil), "vrrp.VrrpVrStartStop")
	api.RegisterMessage((*VrrpVrStartStopReply)(nil), "vrrp.VrrpVrStartStopReply")
	api.RegisterMessage((*VrrpVrTrackIfAddDel)(nil), "vrrp.VrrpVrTrackIfAddDel")
	api.RegisterMessage((*VrrpVrTrackIfAddDelReply)(nil), "vrrp.VrrpVrTrackIfAddDelReply")
	api.RegisterMessage((*VrrpVrTrackIfDetails)(nil), "vrrp.VrrpVrTrackIfDetails")
	api.RegisterMessage((*VrrpVrTrackIfDump)(nil), "vrrp.VrrpVrTrackIfDump")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*VrrpVrAddDel)(nil),
		(*VrrpVrAddDelReply)(nil),
		(*VrrpVrDetails)(nil),
		(*VrrpVrDump)(nil),
		(*VrrpVrPeerDetails)(nil),
		(*VrrpVrPeerDump)(nil),
		(*VrrpVrSetPeers)(nil),
		(*VrrpVrSetPeersReply)(nil),
		(*VrrpVrStartStop)(nil),
		(*VrrpVrStartStopReply)(nil),
		(*VrrpVrTrackIfAddDel)(nil),
		(*VrrpVrTrackIfAddDelReply)(nil),
		(*VrrpVrTrackIfDetails)(nil),
		(*VrrpVrTrackIfDump)(nil),
	}
}

// RPCService represents RPC service API for vrrp module.
type RPCService interface {
	DumpVrrpVr(ctx context.Context, in *VrrpVrDump) (RPCService_DumpVrrpVrClient, error)
	DumpVrrpVrPeer(ctx context.Context, in *VrrpVrPeerDump) (RPCService_DumpVrrpVrPeerClient, error)
	DumpVrrpVrTrackIf(ctx context.Context, in *VrrpVrTrackIfDump) (RPCService_DumpVrrpVrTrackIfClient, error)
	VrrpVrAddDel(ctx context.Context, in *VrrpVrAddDel) (*VrrpVrAddDelReply, error)
	VrrpVrSetPeers(ctx context.Context, in *VrrpVrSetPeers) (*VrrpVrSetPeersReply, error)
	VrrpVrStartStop(ctx context.Context, in *VrrpVrStartStop) (*VrrpVrStartStopReply, error)
	VrrpVrTrackIfAddDel(ctx context.Context, in *VrrpVrTrackIfAddDel) (*VrrpVrTrackIfAddDelReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpVrrpVr(ctx context.Context, in *VrrpVrDump) (RPCService_DumpVrrpVrClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpVrrpVrClient{stream}
	return x, nil
}

type RPCService_DumpVrrpVrClient interface {
	Recv() (*VrrpVrDetails, error)
}

type serviceClient_DumpVrrpVrClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpVrrpVrClient) Recv() (*VrrpVrDetails, error) {
	m := new(VrrpVrDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpVrrpVrPeer(ctx context.Context, in *VrrpVrPeerDump) (RPCService_DumpVrrpVrPeerClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpVrrpVrPeerClient{stream}
	return x, nil
}

type RPCService_DumpVrrpVrPeerClient interface {
	Recv() (*VrrpVrPeerDetails, error)
}

type serviceClient_DumpVrrpVrPeerClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpVrrpVrPeerClient) Recv() (*VrrpVrPeerDetails, error) {
	m := new(VrrpVrPeerDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpVrrpVrTrackIf(ctx context.Context, in *VrrpVrTrackIfDump) (RPCService_DumpVrrpVrTrackIfClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpVrrpVrTrackIfClient{stream}
	return x, nil
}

type RPCService_DumpVrrpVrTrackIfClient interface {
	Recv() (*VrrpVrTrackIfDetails, error)
}

type serviceClient_DumpVrrpVrTrackIfClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpVrrpVrTrackIfClient) Recv() (*VrrpVrTrackIfDetails, error) {
	m := new(VrrpVrTrackIfDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) VrrpVrAddDel(ctx context.Context, in *VrrpVrAddDel) (*VrrpVrAddDelReply, error) {
	out := new(VrrpVrAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VrrpVrSetPeers(ctx context.Context, in *VrrpVrSetPeers) (*VrrpVrSetPeersReply, error) {
	out := new(VrrpVrSetPeersReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VrrpVrStartStop(ctx context.Context, in *VrrpVrStartStop) (*VrrpVrStartStopReply, error) {
	out := new(VrrpVrStartStopReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VrrpVrTrackIfAddDel(ctx context.Context, in *VrrpVrTrackIfAddDel) (*VrrpVrTrackIfAddDelReply, error) {
	out := new(VrrpVrTrackIfAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
